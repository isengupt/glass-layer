[{"/Users/ishansengupta/Desktop/front-end/glass-layer/src/index.js":"1","/Users/ishansengupta/Desktop/front-end/glass-layer/src/App.js":"2","/Users/ishansengupta/Desktop/front-end/glass-layer/src/Scene.js":"3","/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/vertex.js":"4","/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/vertex1.js":"5","/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/vertex2.js":"6","/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/fragment2.js":"7","/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/fragment1.js":"8","/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/fragment.js":"9"},{"size":200,"mtime":1609617841973,"results":"10","hashOfConfig":"11"},{"size":717,"mtime":1610300202175,"results":"12","hashOfConfig":"11"},{"size":8967,"mtime":1609637340211,"results":"13","hashOfConfig":"11"},{"size":244,"mtime":1609626220796,"results":"14","hashOfConfig":"11"},{"size":3195,"mtime":1609637207419,"results":"15","hashOfConfig":"11"},{"size":3011,"mtime":1609637537489,"results":"16","hashOfConfig":"11"},{"size":352,"mtime":1609635294268,"results":"17","hashOfConfig":"11"},{"size":360,"mtime":1609636878333,"results":"18","hashOfConfig":"11"},{"size":391,"mtime":1609619479461,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ilgg8n",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/ishansengupta/Desktop/front-end/glass-layer/src/index.js",[],["40","41"],"/Users/ishansengupta/Desktop/front-end/glass-layer/src/App.js",["42"],"/Users/ishansengupta/Desktop/front-end/glass-layer/src/Scene.js",["43"],"import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { vertex } from \"./shaders/vertex\";\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex1 } from \"./shaders/vertex1\";\nimport { fragment1 } from \"./shaders/fragment1\";\nimport { vertex2 } from \"./shaders/vertex2\";\nimport { fragment2 } from \"./shaders/fragment2\";\nimport vid from \"./img/sample.mp4\";\n\nclass Font extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n    this.count = 40;\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n    this.raycaster = new THREE.Raycaster();\n    //this.mouse = new THREE.Vector2();\n\n    this.mouse = { x: 0, y: 0 };\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addSquares();\n    this.addObjects();\n    this.addPoints();\n   \n\n    this.addLines();\n    this.animate();\n    this.mouseEvents();\n    this.resize();\n  }\n\n  addPoints() {\n    this.materialPoints = new THREE.ShaderMaterial({\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      transparent: true,\n      vertexShader: vertex2,\n      fragmentShader: fragment2,\n    });\n    this.pointsGeo = new THREE.BufferGeometry();\n\n    let vertices = [];\n\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      for (let j = -this.count / 2; j < this.count / 2; j++) {\n        vertices.push(i / 10 + 0.05, j / 10 + 0.05, 0);\n      }\n    }\n\n    this.pointsGeo.setAttribute(\n      \"position\",\n      new THREE.Float32BufferAttribute(vertices, 3)\n    );\n\n    this.particles = new THREE.Points(this.pointsGeo, this.materialPoints);\n\n    this.scene.add(this.particles);\nthis.particles.position.z = 0.008\n\n  }\n\n  addLines() {\n    let material = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n   transparent: true,\n   opacity: 0.5\n    });\n    let geometry = new THREE.Geometry();\n\n    this.lines = new THREE.LineSegments(geometry, material);\n\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      geometry.vertices.push(new THREE.Vector3(-5, i / 10 + 0.05, 0));\n      geometry.vertices.push(new THREE.Vector3(5, i / 10 + 0.05, 0));\n    }\n\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      geometry.vertices.push(new THREE.Vector3(i / 10 + 0.05, -5, 0));\n      geometry.vertices.push(new THREE.Vector3( i / 10 + 0.05, 5, 0));\n    }\n    this.scene.add(this.lines);\n\n    this.lines.position.z = 0.009;\n  }\n\n  mouseEvents() {\n    let that = this;\n    this.testPlane = new THREE.Mesh(\n      new THREE.PlaneGeometry(5, 5),\n      new THREE.MeshBasicMaterial()\n    );\n    function onMouseMove(event) {\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n\n      that.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      that.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      // update the picking ray with the camera and mouse position\n      that.raycaster.setFromCamera(that.mouse, that.camera);\n\n      // calculate objects intersecting the picking ray\n      const intersects = that.raycaster.intersectObjects([that.testPlane]);\n      if (intersects.length > 0) {\n        that.materialSquares.uniforms.mouse.value = intersects[0].point;\n      }\n    }\n\n    window.addEventListener(\"mousemove\", onMouseMove, false);\n  }\n\n  addSquares() {\n    this.materialSquares = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        mouse: { type: \"v3\", value: new THREE.Vector3() },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      transparent: true,\n      vertexShader: vertex1,\n      fragmentShader: fragment1,\n    });\n\n    this.geometrySquares = new THREE.PlaneBufferGeometry(0.1, 0.1);\n\n    this.squares = new THREE.InstancedMesh(\n      this.geometrySquares,\n      this.materialSquares,\n      this.count ** 2\n    );\n\n    this.scene.add(this.squares);\n    this.test = new THREE.Mesh(\n      new THREE.PlaneBufferGeometry(0.3, 0.3),\n      new THREE.MeshBasicMaterial()\n    );\n\n    this.test.position.z = -0.4;\n    this.scene.add(this.test);\n\n    let dummy = new THREE.Object3D();\n\n    let counter = 0;\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      for (let j = -this.count / 2; j < this.count / 2; j++) {\n        dummy.position.set(i / 10, j / 10, 0);\n        dummy.updateMatrix();\n\n        this.squares.setMatrixAt(counter++, dummy.matrix);\n      }\n    }\n\n    this.squares.position.z = 0.01;\n  }\n\n  addObjects() {\n    var video = this.vid;\n\n    const texture = new THREE.VideoTexture(video);\n    texture.minFilter = THREE.LinearFilter;\n    texture.magFilter = THREE.LinearFilter;\n\n    texture.format = THREE.RGBAFormat;\n\n    this.vid.play();\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        texture: { type: \"t\", value: texture },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n\n    this.scene.add(this.plane);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 1080 / 1920;\n\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 0.8;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n\n    this.scene.rotation.x = -this.mouse.y/10\n    this.scene.rotation.y = this.mouse.x/10\n    this.material.uniforms.time.value = this.time;\n    this.materialSquares.uniforms.time.value = this.time;\n    this.materialPoints.uniforms.time.value = this.time;\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <>\n        <video\n          ref={(vid) => {\n            this.vid = vid;\n          }}\n          style={{\n            display: \"none\",\n          }}\n          src={vid}\n          muted={true}\n          playsInline={true}\n        ></video>\n        <div\n          id=\"scene\"\n          ref={(mount) => {\n            this.mount = mount;\n          }}\n        ></div>\n      </>\n    );\n  }\n}\n\nexport default Font;\n","/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/vertex.js",[],"/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/vertex1.js",[],"/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/vertex2.js",[],"/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/fragment2.js",[],"/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/fragment1.js",[],"/Users/ishansengupta/Desktop/front-end/glass-layer/src/shaders/fragment.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":17,"column":11,"nodeType":"50","endLine":17,"endColumn":47},{"ruleId":"51","severity":1,"message":"52","line":214,"column":9,"nodeType":"53","messageId":"54","endLine":214,"endColumn":13},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'that' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]