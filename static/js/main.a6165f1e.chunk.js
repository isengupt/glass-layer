(this["webpackJsonpthree-template"]=this["webpackJsonpthree-template"]||[]).push([[0],{16:function(e,n,t){},17:function(e,n,t){"use strict";t.r(n);var i=t(1),a=t(3),r=t.n(a),s=t(8),o=t.n(s),c=(t(16),t(4)),v=t(9),g=t(2),m=t(6),l=t(5),u=t(0),f=t(10),h=t.p+"static/media/sample.c4188bc2.mp4",d=function(e){Object(m.a)(t,e);var n=Object(l.a)(t);function t(e){var i;return Object(c.a)(this,t),(i=n.call(this,e)).setupResize=function(){window.addEventListener("resize",i.resize)},i.resize=function(){var e,n;i.width=i.container.offsetWidth,i.height=i.container.offsetHeight,i.renderer.setSize(i.width,i.height),i.camera.aspect=i.width/i.height,console.log("resize"),i.imageAspect=.5625,i.height/i.width>i.imageAspect?(e=i.width/i.height*i.imageAspect,n=1):(e=1,n=i.height/i.width/i.imageAspect),i.material.uniforms.resolution.value.x=i.width,i.material.uniforms.resolution.value.y=i.height,i.material.uniforms.resolution.value.z=e,i.material.uniforms.resolution.value.w=n;var t=i.camera.position.z;i.camera.fov=180/Math.PI*2*Math.atan(.8/(2*t)),i.width/i.height>1?i.plane.scale.x=i.camera.aspect:i.plane.scale.y=1/i.camera.aspect,i.camera.updateProjectionMatrix(),console.log(i.camera)},i.start=i.start.bind(Object(g.a)(i)),i.stop=i.stop.bind(Object(g.a)(i)),i.animate=i.animate.bind(Object(g.a)(i)),i}return Object(v.a)(t,[{key:"componentDidMount",value:function(){this.scene=new u.u,this.renderer=new u.C({antialias:!0}),this.count=40,this.width=this.mount.clientWidth,this.height=this.mount.clientHeight,this.renderer.setClearColor(15658734,1),this.renderer.setSize(this.width,this.height),this.renderer.physicallyCorrectLights=!0,this.renderer.outputEncoding=u.D,this.container=document.getElementById("scene"),this.mount.appendChild(this.renderer.domElement),this.raycaster=new u.t,this.mouse={x:0,y:0},this.camera=new u.n(75,this.width/this.height,.001,1e3),this.camera.position.set(0,0,2),this.controls=new f.a(this.camera,this.renderer.domElement),this.time=0,this.setupResize(),this.addSquares(),this.addObjects(),this.addPoints(),this.addLines(),this.animate(),this.mouseEvents(),this.resize()}},{key:"addPoints",value:function(){this.materialPoints=new u.v({side:u.b,uniforms:{time:{type:"f",value:0},resolution:{type:"v4",value:new u.A},uvRate1:{value:new u.y(1,1)}},transparent:!0,vertexShader:"\nattribute vec3 color;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nuniform float time;\nuniform vec2 uvRate1;\nuniform vec3 mouse;\nuniform sampler2D texture;\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nvarying float vDist;\n\n\n  void main() {\n    vUv = uv;\n\n    float size = abs(cnoise(vec3(4.*position.x,4.* position.y, time/4.)));\n   \n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\n    gl_PointSize = size*12. * (1. / - mvPosition.z);\n  gl_Position = projectionMatrix * mvPosition;\n} \n",fragmentShader:"\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float  vDist;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\nvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n  \n  \n\n  gl_FragColor = vec4(1.0,1.0,1.0,0.6);\n  \n  \n\n}\n"}),this.pointsGeo=new u.a;for(var e=[],n=-this.count/2;n<this.count/2;n++)for(var t=-this.count/2;t<this.count/2;t++)e.push(n/10+.05,t/10+.05,0);this.pointsGeo.setAttribute("position",new u.d(e,3)),this.particles=new u.q(this.pointsGeo,this.materialPoints),this.scene.add(this.particles),this.particles.position.z=.008}},{key:"addLines",value:function(){var e=new u.g({color:16777215,transparent:!0,opacity:.5}),n=new u.e;this.lines=new u.h(n,e);for(var t=-this.count/2;t<this.count/2;t++)n.vertices.push(new u.z(-5,t/10+.05,0)),n.vertices.push(new u.z(5,t/10+.05,0));for(var i=-this.count/2;i<this.count/2;i++)n.vertices.push(new u.z(i/10+.05,-5,0)),n.vertices.push(new u.z(i/10+.05,5,0));this.scene.add(this.lines),this.lines.position.z=.009}},{key:"mouseEvents",value:function(){var e=this;this.testPlane=new u.k(new u.p(5,5),new u.l),window.addEventListener("mousemove",(function(n){e.mouse.x=n.clientX/window.innerWidth*2-1,e.mouse.y=-n.clientY/window.innerHeight*2+1,e.raycaster.setFromCamera(e.mouse,e.camera);var t=e.raycaster.intersectObjects([e.testPlane]);t.length>0&&(e.materialSquares.uniforms.mouse.value=t[0].point)}),!1)}},{key:"addSquares",value:function(){this.materialSquares=new u.v({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:u.b,uniforms:{time:{type:"f",value:0},mouse:{type:"v3",value:new u.z},resolution:{type:"v4",value:new u.A},uvRate1:{value:new u.y(1,1)}},transparent:!0,vertexShader:"\nattribute vec3 color;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nuniform float time;\nuniform vec2 uvRate1;\nuniform vec3 mouse;\nuniform sampler2D texture;\n\nvarying float vDist;\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n  void main() {\n    vUv = uv;\n   \n    float distance = length(mouse - instanceMatrix[3].xyz);\n\n  \n\n    vec3 newposition = position;\n\n    float koef = 0.;\n\n    if (distance<0.3) {\n      koef = 1. - distance / 0.3;\n      koef *= abs(cnoise(vec3(10.*instanceMatrix[3].x, 10.*instanceMatrix[3].y, time/4.)));\n    }\n\n    vDist = koef;\n \n    newposition.z += koef * 0.5;\n\n  gl_Position = projectionMatrix * modelViewMatrix *instanceMatrix* vec4(newposition,1.0);\n}\n",fragmentShader:"\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float  vDist;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\nvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n  \n  \n\n  gl_FragColor = vec4(1.0,1.0,1.0,0.9 * vDist);\n  \n  \n\n}\n"}),this.geometrySquares=new u.o(.1,.1),this.squares=new u.f(this.geometrySquares,this.materialSquares,Math.pow(this.count,2)),this.scene.add(this.squares),this.test=new u.k(new u.o(.3,.3),new u.l),this.test.position.z=-.4,this.scene.add(this.test);for(var e=new u.m,n=0,t=-this.count/2;t<this.count/2;t++)for(var i=-this.count/2;i<this.count/2;i++)e.position.set(t/10,i/10,0),e.updateMatrix(),this.squares.setMatrixAt(n++,e.matrix);this.squares.position.z=.01}},{key:"addObjects",value:function(){var e=this.vid,n=new u.B(e);n.minFilter=u.i,n.magFilter=u.i,n.format=u.s,this.vid.play();this.material=new u.v({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:u.b,uniforms:{time:{type:"f",value:0},texture:{type:"t",value:n},resolution:{type:"v4",value:new u.A},uvRate1:{value:new u.y(1,1)}},vertexShader:"\nattribute vec3 color;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nuniform vec2 uvRate1;\nuniform sampler2D texture;\n  void main() {\n    vUv = uv;\n    \n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n",fragmentShader:"\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\nvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n  vec4 image  = texture2D(texture, newUV);\n  \n\n  //gl_FragColor = vec4(1.0,0.0,0.0,1.);\n  gl_FragColor = image;\n  \n\n}\n"}),this.geometry=new u.p(1,1,1,1),this.plane=new u.k(this.geometry,this.material),this.scene.add(this.plane)}},{key:"componentWillUnmount",value:function(){this.stop(),this.mount.removeChild(this.renderer.domElement)}},{key:"start",value:function(){this.frameId||(this.frameId=requestAnimationFrame(this.animate))}},{key:"stop",value:function(){cancelAnimationFrame(this.frameId)}},{key:"animate",value:function(){this.time+=.05,this.scene.rotation.x=-this.mouse.y/10,this.scene.rotation.y=this.mouse.x/10,this.material.uniforms.time.value=this.time,this.materialSquares.uniforms.time.value=this.time,this.materialPoints.uniforms.time.value=this.time,this.frameId=requestAnimationFrame(this.animate),this.renderScene()}},{key:"renderScene",value:function(){this.renderer.render(this.scene,this.camera)}},{key:"render",value:function(){var e=this;return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsx)("video",{ref:function(n){e.vid=n},style:{display:"none"},src:h,muted:!0,playsInline:!0}),Object(i.jsx)("div",{id:"scene",ref:function(n){e.mount=n}})]})}}]),t}(a.Component);var x=function(){return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsxs)("div",{className:"frame",children:[Object(i.jsx)("h1",{className:"frame__title",children:"Glass Navigation"}),Object(i.jsx)("div",{className:"frame__links"}),Object(i.jsxs)("div",{className:"frame__nav",children:[Object(i.jsx)("a",{className:"frame__link",href:"https://isengupt.github.io/twirl/",children:"Previous"}),Object(i.jsx)("a",{className:"frame__link",href:"#",children:"Resume"}),Object(i.jsx)("a",{className:"frame__link",href:"https://github.com/isengupt/glass-layer/",children:"GitHub"})]})]}),Object(i.jsx)(d,{})]})};o.a.render(Object(i.jsx)(r.a.StrictMode,{children:Object(i.jsx)(x,{})}),document.getElementById("root"))}},[[17,1,2]]]);
//# sourceMappingURL=main.a6165f1e.chunk.js.map