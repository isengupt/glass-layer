{"version":3,"sources":["img/sample.mp4","Scene.js","shaders/vertex2.js","shaders/fragment2.js","shaders/vertex1.js","shaders/fragment1.js","shaders/vertex.js","shaders/fragment.js","App.js","index.js"],"names":["Font","props","setupResize","window","addEventListener","resize","a1","a2","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","material","uniforms","resolution","value","x","y","z","w","dist","position","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","start","bind","stop","animate","this","scene","THREE","antialias","count","mount","clientWidth","clientHeight","setClearColor","physicallyCorrectLights","outputEncoding","document","getElementById","appendChild","domElement","raycaster","mouse","set","controls","OrbitControls","time","addSquares","addObjects","addPoints","addLines","mouseEvents","materialPoints","side","type","uvRate1","transparent","vertexShader","fragmentShader","pointsGeo","vertices","i","j","push","setAttribute","particles","add","color","opacity","geometry","lines","that","testPlane","event","clientX","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","length","materialSquares","point","extensions","derivatives","geometrySquares","squares","test","dummy","counter","updateMatrix","setMatrixAt","matrix","video","vid","texture","minFilter","magFilter","format","play","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","rotation","renderScene","render","ref","style","display","src","muted","playsInline","id","Component","App","className","href","Scene","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3ababa65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sample.c4188bc2.mp4\";","import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { vertex } from \"./shaders/vertex\";\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex1 } from \"./shaders/vertex1\";\nimport { fragment1 } from \"./shaders/fragment1\";\nimport { vertex2 } from \"./shaders/vertex2\";\nimport { fragment2 } from \"./shaders/fragment2\";\nimport vid from \"./img/sample.mp4\";\n\nclass Font extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n    this.count = 40;\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n    this.raycaster = new THREE.Raycaster();\n    //this.mouse = new THREE.Vector2();\n\n    this.mouse = { x: 0, y: 0 };\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addSquares();\n    this.addObjects();\n    this.addPoints();\n   \n\n    this.addLines();\n    this.animate();\n    this.mouseEvents();\n    this.resize();\n  }\n\n  addPoints() {\n    this.materialPoints = new THREE.ShaderMaterial({\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      transparent: true,\n      vertexShader: vertex2,\n      fragmentShader: fragment2,\n    });\n    this.pointsGeo = new THREE.BufferGeometry();\n\n    let vertices = [];\n\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      for (let j = -this.count / 2; j < this.count / 2; j++) {\n        vertices.push(i / 10 + 0.05, j / 10 + 0.05, 0);\n      }\n    }\n\n    this.pointsGeo.setAttribute(\n      \"position\",\n      new THREE.Float32BufferAttribute(vertices, 3)\n    );\n\n    this.particles = new THREE.Points(this.pointsGeo, this.materialPoints);\n\n    this.scene.add(this.particles);\nthis.particles.position.z = 0.008\n\n  }\n\n  addLines() {\n    let material = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n   transparent: true,\n   opacity: 0.5\n    });\n    let geometry = new THREE.Geometry();\n\n    this.lines = new THREE.LineSegments(geometry, material);\n\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      geometry.vertices.push(new THREE.Vector3(-5, i / 10 + 0.05, 0));\n      geometry.vertices.push(new THREE.Vector3(5, i / 10 + 0.05, 0));\n    }\n\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      geometry.vertices.push(new THREE.Vector3(i / 10 + 0.05, -5, 0));\n      geometry.vertices.push(new THREE.Vector3( i / 10 + 0.05, 5, 0));\n    }\n    this.scene.add(this.lines);\n\n    this.lines.position.z = 0.009;\n  }\n\n  mouseEvents() {\n    let that = this;\n    this.testPlane = new THREE.Mesh(\n      new THREE.PlaneGeometry(5, 5),\n      new THREE.MeshBasicMaterial()\n    );\n    function onMouseMove(event) {\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n\n      that.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      that.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      // update the picking ray with the camera and mouse position\n      that.raycaster.setFromCamera(that.mouse, that.camera);\n\n      // calculate objects intersecting the picking ray\n      const intersects = that.raycaster.intersectObjects([that.testPlane]);\n      if (intersects.length > 0) {\n        that.materialSquares.uniforms.mouse.value = intersects[0].point;\n      }\n    }\n\n    window.addEventListener(\"mousemove\", onMouseMove, false);\n  }\n\n  addSquares() {\n    this.materialSquares = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        mouse: { type: \"v3\", value: new THREE.Vector3() },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      transparent: true,\n      vertexShader: vertex1,\n      fragmentShader: fragment1,\n    });\n\n    this.geometrySquares = new THREE.PlaneBufferGeometry(0.1, 0.1);\n\n    this.squares = new THREE.InstancedMesh(\n      this.geometrySquares,\n      this.materialSquares,\n      this.count ** 2\n    );\n\n    this.scene.add(this.squares);\n    this.test = new THREE.Mesh(\n      new THREE.PlaneBufferGeometry(0.3, 0.3),\n      new THREE.MeshBasicMaterial()\n    );\n\n    this.test.position.z = -0.4;\n    this.scene.add(this.test);\n\n    let dummy = new THREE.Object3D();\n\n    let counter = 0;\n    for (let i = -this.count / 2; i < this.count / 2; i++) {\n      for (let j = -this.count / 2; j < this.count / 2; j++) {\n        dummy.position.set(i / 10, j / 10, 0);\n        dummy.updateMatrix();\n\n        this.squares.setMatrixAt(counter++, dummy.matrix);\n      }\n    }\n\n    this.squares.position.z = 0.01;\n  }\n\n  addObjects() {\n    var video = this.vid;\n\n    const texture = new THREE.VideoTexture(video);\n    texture.minFilter = THREE.LinearFilter;\n    texture.magFilter = THREE.LinearFilter;\n\n    texture.format = THREE.RGBAFormat;\n\n    this.vid.play();\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        texture: { type: \"t\", value: texture },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n\n    this.scene.add(this.plane);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 1080 / 1920;\n\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 0.8;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n\n    this.scene.rotation.x = -this.mouse.y/10\n    this.scene.rotation.y = this.mouse.x/10\n    this.material.uniforms.time.value = this.time;\n    this.materialSquares.uniforms.time.value = this.time;\n    this.materialPoints.uniforms.time.value = this.time;\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <>\n        <video\n          ref={(vid) => {\n            this.vid = vid;\n          }}\n          style={{\n            display: \"none\",\n          }}\n          src={vid}\n          muted={true}\n          playsInline={true}\n        ></video>\n        <div\n          id=\"scene\"\n          ref={(mount) => {\n            this.mount = mount;\n          }}\n        ></div>\n      </>\n    );\n  }\n}\n\nexport default Font;\n","export var vertex2 = `\nattribute vec3 color;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nuniform float time;\nuniform vec2 uvRate1;\nuniform vec3 mouse;\nuniform sampler2D texture;\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nvarying float vDist;\n\n\n  void main() {\n    vUv = uv;\n\n    float size = abs(cnoise(vec3(4.*position.x,4.* position.y, time/4.)));\n   \n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\n    gl_PointSize = size*12. * (1. / - mvPosition.z);\n  gl_Position = projectionMatrix * mvPosition;\n} \n`;","export var fragment2 = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float  vDist;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\nvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n  \n  \n\n  gl_FragColor = vec4(1.0,1.0,1.0,0.6);\n  \n  \n\n}\n`;\n","export var vertex1 = `\nattribute vec3 color;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nuniform float time;\nuniform vec2 uvRate1;\nuniform vec3 mouse;\nuniform sampler2D texture;\n\nvarying float vDist;\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n  void main() {\n    vUv = uv;\n   \n    float distance = length(mouse - instanceMatrix[3].xyz);\n\n  \n\n    vec3 newposition = position;\n\n    float koef = 0.;\n\n    if (distance<0.3) {\n      koef = 1. - distance / 0.3;\n      koef *= abs(cnoise(vec3(10.*instanceMatrix[3].x, 10.*instanceMatrix[3].y, time/4.)));\n    }\n\n    vDist = koef;\n \n    newposition.z += koef * 0.5;\n\n  gl_Position = projectionMatrix * modelViewMatrix *instanceMatrix* vec4(newposition,1.0);\n}\n`;","export var fragment1 = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float  vDist;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\nvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n  \n  \n\n  gl_FragColor = vec4(1.0,1.0,1.0,0.9 * vDist);\n  \n  \n\n}\n`;\n","export var vertex = `\nattribute vec3 color;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nuniform vec2 uvRate1;\nuniform sampler2D texture;\n  void main() {\n    vUv = uv;\n    \n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n","export var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\nvoid main(){\n\nvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n  vec4 image  = texture2D(texture, newUV);\n  \n\n  //gl_FragColor = vec4(1.0,0.0,0.0,1.);\n  gl_FragColor = image;\n  \n\n}\n`;\n","import \"./App.css\";\nimport Scene from \"./Scene\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"frame\">\n        <h1 className=\"frame__title\">Glass Layer</h1>\n        <div className=\"frame__links\"></div>\n        <div className=\"frame__nav\">\n          <a\n            className=\"frame__link\"\n            href=\"https://isengupt.github.io/twirl/\"\n          >\n            Previous\n          </a>\n          <a className=\"frame__link\" href=\"#\">\n            Resume\n          </a>\n          <a\n            className=\"frame__link\"\n            href=\"https://github.com/isengupt/glass-layer/\"\n          >\n            GitHub\n          </a>\n        </div>\n      </div>\n      <Scene />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}